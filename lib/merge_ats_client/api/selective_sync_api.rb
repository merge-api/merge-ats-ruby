=begin
#Merge ATS API

#The unified API for building rich integrations with multiple Applicant Tracking System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'cgi'

module MergeATSClient
  class SelectiveSyncApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a linked account's selective syncs.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [Array<LinkedAccountSelectiveSyncConfiguration>]
    def selective_sync_configurations_list(x_account_token, opts = {})
      data, _status_code, _headers = selective_sync_configurations_list_with_http_info(x_account_token, opts)
      data
    end

    # Get a linked account&#39;s selective syncs.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LinkedAccountSelectiveSyncConfiguration>, Integer, Hash)>] Array<LinkedAccountSelectiveSyncConfiguration> data, response status code and response headers
    def selective_sync_configurations_list_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SelectiveSyncApi.selective_sync_configurations_list ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling SelectiveSyncApi.selective_sync_configurations_list"
      end
      # resource path
      local_var_path = '/selective-sync/configurations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LinkedAccountSelectiveSyncConfiguration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"SelectiveSyncApi.selective_sync_configurations_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SelectiveSyncApi#selective_sync_configurations_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace a linked account's selective syncs.
    # @param x_account_token [String] Token identifying the end user.
    # @param linked_account_selective_sync_configuration_list_request [LinkedAccountSelectiveSyncConfigurationListRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<LinkedAccountSelectiveSyncConfiguration>]
    def selective_sync_configurations_update(x_account_token, linked_account_selective_sync_configuration_list_request, opts = {})
      data, _status_code, _headers = selective_sync_configurations_update_with_http_info(x_account_token, linked_account_selective_sync_configuration_list_request, opts)
      data
    end

    # Replace a linked account&#39;s selective syncs.
    # @param x_account_token [String] Token identifying the end user.
    # @param linked_account_selective_sync_configuration_list_request [LinkedAccountSelectiveSyncConfigurationListRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LinkedAccountSelectiveSyncConfiguration>, Integer, Hash)>] Array<LinkedAccountSelectiveSyncConfiguration> data, response status code and response headers
    def selective_sync_configurations_update_with_http_info(x_account_token, linked_account_selective_sync_configuration_list_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SelectiveSyncApi.selective_sync_configurations_update ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling SelectiveSyncApi.selective_sync_configurations_update"
      end
      # verify the required parameter 'linked_account_selective_sync_configuration_list_request' is set
      if @api_client.config.client_side_validation && linked_account_selective_sync_configuration_list_request.nil?
        fail ArgumentError, "Missing the required parameter 'linked_account_selective_sync_configuration_list_request' when calling SelectiveSyncApi.selective_sync_configurations_update"
      end
      # resource path
      local_var_path = '/selective-sync/configurations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(linked_account_selective_sync_configuration_list_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LinkedAccountSelectiveSyncConfiguration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"SelectiveSyncApi.selective_sync_configurations_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SelectiveSyncApi#selective_sync_configurations_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get metadata for the conditions available to a linked account.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :common_model 
    # @option opts [String] :cursor The pagination cursor value.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [PaginatedConditionSchemaList]
    def selective_sync_meta_list(x_account_token, opts = {})
      data, _status_code, _headers = selective_sync_meta_list_with_http_info(x_account_token, opts)
      data
    end

    # Get metadata for the conditions available to a linked account.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :common_model 
    # @option opts [String] :cursor The pagination cursor value.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(PaginatedConditionSchemaList, Integer, Hash)>] PaginatedConditionSchemaList data, response status code and response headers
    def selective_sync_meta_list_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SelectiveSyncApi.selective_sync_meta_list ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling SelectiveSyncApi.selective_sync_meta_list"
      end
      # resource path
      local_var_path = '/selective-sync/meta'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'common_model'] = opts[:'common_model'] if !opts[:'common_model'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedConditionSchemaList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"SelectiveSyncApi.selective_sync_meta_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SelectiveSyncApi#selective_sync_meta_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
